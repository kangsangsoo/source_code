import gmpy2
from itertools import combinations
from Crypto.Util.number import long_to_bytes
import math

n = []
c = []

for i in range(7):
    n.append(0)
    c.append(0)

n[0] = 62308755319145620821018536270062376749231674369176677381160850044058335934618815197104096576398652593850689283555106600847442086363265111793976143615417751196545481410116386448773893525658623459051775592543806054051896167361665996502792172496387791384411017659993454221091281365767686565511343047190170194759
c[0] = 314018649404111303186395723332646429255339866442121041167912676901119945319801709185444294590610133490154232774276805093184182937454095442085779549686541397543191726129748653554543967472837860955614490622312028442151857400800963486977518621771027075264581047413398657342248054740075408286035350355632518973

n[1] = 89440368163165698774361702866843025595722870053896272721045594323113757590883372450153193622248526827542775754192448938443317922564781950744348389162470266572582114364080380446729332518430837138366406163770312540213221306359411952518993986640791498628777845429880365046688392218032894602992148550008654976757
c[1] = 84141333070235310275875600322707013624084814371875711947808582296782048751190093768264013891495980158460165182264346714116460237442162142958636458467282405820838783126274811039496383539100548949038310219560446774215566330870529560230507337992130634199979978939443512213578198381196526008269724699555622017508

n[2] = 115870796848287832332463782032760751247473813600868479576563157273846260262215247926270922116387410896575636454192279435263149820820467796486003287433815333630651407224662705741830382461862392168994756871724543418051395037984291440563427132966901545255972844725331696542465349772813215818791316288589654403019
c[2] = 40946624774998107191693310178005844798612547089678169183776146308079658109049760762888658658410856532550077080970319438504796061046137202443495712265672897812205385542955092592938765378492834068561814282387370988959861607769588916856542320505029469859612528312007042988804953432025740362330438119941398490297

n[3] = 138295488064500357125760670903917148255430954392008104080661678818787228223833956523041174423682336292769968807292643747782469166134084973774416545975578613153377077046277759727775139009156060295998758694362511618524560550265970532964378378335284263442831841811537580768903466483840729169266514796380351961641
c[3] = 22825927333812415105171881901378409464377658255165937269251421684032193802056742342928738149448751594985308793391175854572436102566980751701805567111448619134044405131538661378855991804296193283046575087738118879590811363097366830121952179252080844663185434751474108966977818639012471732071382909787577997671

n[4] = 71475759850088390424586446515634205730814619345008506900719033828905829909847199898143100652284452961125204777112482478478956039901143534560191435978860718371754239924261840039643346485823405590137073021283054343512414565164344675877224547211303737687362917638422784893708101595416300300602779035474999151621
c[4] = 55383011630904397435664650626522403381329029339555461795904445861095241562896189661158548556813865348344236858670943116184543304296045390233705177108392057048756372379241241784476178296052146255842863613929599039467710177778445903950430329141338683263492913244019547056387261734540797184680696741050094470705

n[5] = 147214130430567907179846764819625506575596784801977003275978500324030300666538875926189959072150418519230379236938994059354162013727488298722869197670859826368877723406939183314074185000855966965363008950171442530004688499378876085026389522761425751091272558727433789956097348417045948254290712931881031993121
c[5] = 92757423220467124452789025871144574120406773462070158460786674423334395871453063763226199982472156680597787381912837091974439815884881368581987523550948769072447351057301268139820648785256922265100828128337426240980855066257303634988230887807090683895126519059951135205387650696834025680343225727469069900114

n[6] = 85667282896075882465037792689811418689917697414715859823780800815599203966397201149419127575353992884591552986904788181290254886955347377553562146146781880777424383351242969347031763949762439330683031754925803830142606230372361935618362914370949470177509090459256770618749001609821655952145486268005253419119
c[6] = 7926550265662668696899969268891948341660123536580321349332538923772714849715761334980208830558051341786919192528436643756097613806625268122195418305622889542852973987963593950888568522888183581942492754092624869727231924379032402417488637351971889175725658510505339956692522544246755150506856936113009593033


# n이 모두 서로소인지 확인
for i in range(7):
    for j in range(7):
        if i == j:
            continue
        print(math.gcd(n[i], n[j]))

# mpz화

for i in range(7):
    n[i] = gmpy2.mpz(n[i])



gmpy2.get_context().precision = 100000

M = gmpy2.mpz(1)
    
for j in range(7):
    M = M * n[j]
m = 0
for j in range(7):
    M_ = M / n[j]
    m = m + c[j] * gmpy2.powmod(int(M_), -1, n[j]) * M_
m = int(m) % M
print(long_to_bytes(gmpy2.root(m, 7)))
